# Generated by Django 5.2.4 on 2025-07-06 16:03

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('learning', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExerciseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('function', 'Function Implementation'), ('class', 'Class Implementation'), ('algorithm', 'Algorithm Challenge'), ('debug', 'Debug Exercise'), ('fill_blank', 'Fill in the Blanks'), ('multiple_choice', 'Multiple Choice'), ('project', 'Mini Project'), ('quiz', 'Code Quiz')], max_length=50, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('supports_code_execution', models.BooleanField(default=True)),
                ('max_execution_time', models.PositiveIntegerField(default=30, help_text='Maximum execution time in seconds')),
            ],
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('file_extension', models.CharField(help_text='e.g., .py, .js, .cpp', max_length=10)),
                ('docker_image', models.CharField(default='python:3.11-slim', help_text='Docker image for code execution', max_length=100)),
                ('syntax_highlighter', models.CharField(default='python', help_text='Syntax highlighter identifier', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(help_text='Exercise description and requirements')),
                ('instructions', models.TextField(help_text='Step-by-step instructions')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('starter_code', models.TextField(blank=True, help_text='Initial code template for students')),
                ('solution_code', models.TextField(help_text='Complete solution (hidden from students)')),
                ('expected_output', models.TextField(blank=True, help_text='Expected output for validation')),
                ('estimated_time', models.PositiveIntegerField(help_text='Estimated completion time in minutes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('points', models.PositiveIntegerField(default=10, help_text='Points awarded for completion')),
                ('is_published', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('ai_generated_hints', models.TextField(blank=True)),
                ('ai_common_mistakes', models.TextField(blank=True)),
                ('ai_learning_notes', models.TextField(blank=True)),
                ('execution_timeout', models.PositiveIntegerField(default=10, help_text='Code execution timeout in seconds')),
                ('memory_limit', models.PositiveIntegerField(default=128, help_text='Memory limit in MB')),
                ('allow_imports', models.BooleanField(default=False, help_text='Allow import statements in student code')),
                ('total_submissions', models.PositiveIntegerField(default=0)),
                ('successful_submissions', models.PositiveIntegerField(default=0)),
                ('average_attempts', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='learning.lesson')),
                ('exercise_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='learning.exercisetype')),
                ('programming_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='learning.programminglanguage')),
            ],
            options={
                'ordering': ['lesson', 'order'],
                'unique_together': {('lesson', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='ExerciseHint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('unlock_after_attempts', models.PositiveIntegerField(default=1, help_text='Number of failed attempts before hint becomes available')),
                ('point_penalty', models.PositiveIntegerField(default=0, help_text='Points deducted for using this hint')),
                ('ai_generated', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hints', to='learning.exercise')),
            ],
            options={
                'ordering': ['exercise', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CodeExecutionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('docker_container_id', models.CharField(blank=True, max_length=100)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('total_executions', models.PositiveIntegerField(default=0)),
                ('successful_executions', models.PositiveIntegerField(default=0)),
                ('peak_memory_usage', models.FloatField(default=0.0, help_text='Peak memory usage in MB')),
                ('total_cpu_time', models.FloatField(default=0.0, help_text='Total CPU time in seconds')),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='execution_sessions', to=settings.AUTH_USER_MODEL)),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='execution_sessions', to='learning.exercise')),
                ('programming_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.programminglanguage')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('code', models.TextField(help_text="Student's submitted code")),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('passed', 'Passed'), ('failed', 'Failed'), ('error', 'Error'), ('timeout', 'Timeout'), ('memory_exceeded', 'Memory Exceeded')], default='pending', max_length=20)),
                ('score', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('passed_tests', models.PositiveIntegerField(default=0)),
                ('total_tests', models.PositiveIntegerField(default=0)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('memory_used', models.FloatField(blank=True, help_text='Memory used in MB', null=True)),
                ('output', models.TextField(blank=True, help_text='Program output')),
                ('error_message', models.TextField(blank=True, help_text='Error messages')),
                ('ai_feedback', models.TextField(blank=True)),
                ('ai_suggestions', models.TextField(blank=True)),
                ('feedback_generated', models.BooleanField(default=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('is_final', models.BooleanField(default=False)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='learning.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('user', 'exercise', 'attempt_number')},
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('input_data', models.TextField(blank=True, help_text='JSON formatted input data')),
                ('expected_output', models.TextField(help_text='Expected output')),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden test cases for assessment')),
                ('is_sample', models.BooleanField(default=False, help_text='Sample test case shown to students')),
                ('weight', models.PositiveIntegerField(default=1, help_text='Weight for scoring')),
                ('timeout', models.PositiveIntegerField(default=5, help_text='Test case timeout in seconds')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='learning.exercise')),
            ],
            options={
                'ordering': ['exercise', 'order'],
            },
        ),
        migrations.CreateModel(
            name='HintUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_at', models.DateTimeField(auto_now_add=True)),
                ('helpful', models.BooleanField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True)),
                ('hint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='learning.exercisehint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hint_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'hint')},
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False)),
                ('best_score', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)])),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_time_spent', models.PositiveIntegerField(default=0, help_text='Total time in minutes')),
                ('hints_used', models.PositiveIntegerField(default=0)),
                ('ai_help_requested', models.PositiveIntegerField(default=0)),
                ('personal_notes', models.TextField(blank=True)),
                ('bookmarked', models.BooleanField(default=False)),
                ('last_attempt_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='learning.exercise')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_attempt_at'],
                'unique_together': {('user', 'exercise')},
            },
        ),
        migrations.CreateModel(
            name='TestCaseResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(default=False)),
                ('actual_output', models.TextField(blank=True)),
                ('execution_time', models.FloatField(blank=True, help_text='Test execution time in seconds', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='learning.submission')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='learning.testcase')),
            ],
            options={
                'unique_together': {('submission', 'test_case')},
            },
        ),
    ]
