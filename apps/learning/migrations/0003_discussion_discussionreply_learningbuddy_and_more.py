# Generated by Django 5.2.4 on 2025-07-06 16:06

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('learning', '0002_exercisetype_programminglanguage_exercise_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('content', models.TextField()),
                ('discussion_type', models.CharField(choices=[('general', 'General Discussion'), ('question', 'Question'), ('help', 'Help Request'), ('announcement', 'Announcement'), ('project_share', 'Project Share'), ('code_review', 'Code Review')], default='general', max_length=20)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('is_resolved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('reply_count', models.PositiveIntegerField(default=0)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity_at', models.DateTimeField(auto_now_add=True)),
                ('is_moderated', models.BooleanField(default=False)),
                ('moderator_notes', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='started_discussions', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='learning.course')),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='learning.exercise')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discussions', to='learning.lesson')),
            ],
            options={
                'ordering': ['-is_pinned', '-last_activity_at'],
            },
        ),
        migrations.CreateModel(
            name='DiscussionReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_answer', models.BooleanField(default=False, help_text='Mark as the accepted answer')),
                ('is_helpful', models.BooleanField(default=False)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('shared_code', models.TextField(blank=True, help_text='Code snippet shared in reply')),
                ('code_language', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_moderated', models.BooleanField(default=False)),
                ('is_flagged', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discussion_replies', to=settings.AUTH_USER_MODEL)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='learning.discussion')),
                ('parent_reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_replies', to='learning.discussionreply')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningBuddy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('mentor_mentee', 'Mentor-Mentee'), ('study_partner', 'Study Partner'), ('accountability', 'Accountability Partner')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('focus_topics', models.TextField(help_text='Learning topics to focus on together')),
                ('goals', models.TextField(help_text='Shared learning goals')),
                ('meeting_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('as_needed', 'As Needed')], default='weekly', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_mutual', models.BooleanField(default=False, help_text='Both users agreed to the relationship')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buddy_relationships_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buddy_relationships_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('session_type', models.CharField(choices=[('study_group', 'Study Group Session'), ('pair_programming', 'Pair Programming'), ('code_review', 'Code Review Session'), ('project_work', 'Project Work'), ('mentoring', 'Mentoring Session')], max_length=20)),
                ('max_participants', models.PositiveIntegerField(default=5)),
                ('scheduled_at', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=60)),
                ('agenda', models.TextField(blank=True)),
                ('materials_link', models.URLField(blank=True)),
                ('meeting_link', models.URLField(blank=True, help_text='Video call link')),
                ('meeting_password', models.CharField(blank=True, max_length=50)),
                ('is_public', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('session_notes', models.TextField(blank=True)),
                ('outcomes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_sessions', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='learning_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('discussion_reply', 'Discussion Reply'), ('study_group_invite', 'Study Group Invitation'), ('peer_review_request', 'Peer Review Request'), ('session_reminder', 'Session Reminder'), ('buddy_request', 'Learning Buddy Request'), ('achievement', 'Achievement Unlocked'), ('course_update', 'Course Update'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('action_url', models.URLField(blank=True)),
                ('action_text', models.CharField(blank=True, max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PeerReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('code_to_review', models.TextField()),
                ('max_reviewers', models.PositiveIntegerField(default=3)),
                ('review_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('in_review', 'In Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('completed_reviews', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_reviews', to=settings.AUTH_USER_MODEL)),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='learning.exercise')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='learning.lesson')),
                ('programming_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.programminglanguage')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_feedback', models.TextField()),
                ('rating', models.PositiveIntegerField(help_text='Overall code quality rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('code_quality', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('readability', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('efficiency', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('best_practices', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('improvement_suggestions', models.TextField(blank=True)),
                ('positive_aspects', models.TextField(blank=True)),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('author_response', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_reviews', to=settings.AUTH_USER_MODEL)),
                ('peer_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='learning.peerreview')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('peer_review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.peerreview')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='peerreview',
            name='reviewers',
            field=models.ManyToManyField(related_name='assigned_reviews', through='learning.ReviewAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('group_type', models.CharField(choices=[('course', 'Course Study Group'), ('topic', 'Topic Study Group'), ('project', 'Project Collaboration'), ('practice', 'Practice Group')], default='course', max_length=20)),
                ('max_members', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(50)])),
                ('is_public', models.BooleanField(default=True, help_text='Public groups can be discovered and joined')),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='learning.course')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_study_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='member', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('helpful_contributions', models.PositiveIntegerField(default=0)),
                ('study_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='learning.studygroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='studygroup',
            name='members',
            field=models.ManyToManyField(related_name='study_groups', through='learning.StudyGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='StudyGroupPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('question', 'Question'), ('resource', 'Resource Share'), ('progress', 'Progress Update'), ('project', 'Project Share')], default='discussion', max_length=20)),
                ('shared_code', models.TextField(blank=True)),
                ('code_language', models.CharField(blank=True, max_length=50)),
                ('external_link', models.URLField(blank=True)),
                ('likes', models.PositiveIntegerField(default=0)),
                ('replies_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_group_posts', to=settings.AUTH_USER_MODEL)),
                ('study_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='learning.studygroup')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('bookmark', 'Bookmark'), ('follow', 'Follow'), ('upvote', 'Upvote'), ('downvote', 'Downvote'), ('share', 'Share'), ('report', 'Report')], max_length=20)),
                ('content_type', models.CharField(max_length=50)),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='discussion',
            index=models.Index(fields=['course', '-last_activity_at'], name='learning_di_course__2fbc03_idx'),
        ),
        migrations.AddIndex(
            model_name='discussion',
            index=models.Index(fields=['lesson', '-last_activity_at'], name='learning_di_lesson__c5b089_idx'),
        ),
        migrations.AddIndex(
            model_name='discussion',
            index=models.Index(fields=['exercise', '-last_activity_at'], name='learning_di_exercis_2db203_idx'),
        ),
        migrations.AddIndex(
            model_name='discussionreply',
            index=models.Index(fields=['discussion', 'created_at'], name='learning_di_discuss_d98df8_idx'),
        ),
        migrations.AddIndex(
            model_name='discussionreply',
            index=models.Index(fields=['parent_reply', 'created_at'], name='learning_di_parent__54c946_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='learningbuddy',
            unique_together={('user1', 'user2')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', '-created_at'], name='learning_no_user_id_ff68fd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='codereview',
            unique_together={('peer_review', 'reviewer')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewassignment',
            unique_together={('peer_review', 'reviewer')},
        ),
        migrations.AlterUniqueTogether(
            name='studygroupmembership',
            unique_together={('user', 'study_group')},
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['content_type', 'object_id', 'interaction_type'], name='learning_us_content_0b7df2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userinteraction',
            unique_together={('user', 'interaction_type', 'content_type', 'object_id')},
        ),
    ]
