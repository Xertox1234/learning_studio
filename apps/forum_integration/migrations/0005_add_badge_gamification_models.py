# Generated by Django 5.2.4 on 2025-07-22 01:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('forum_conversation', '0013_auto_20201220_1745'),
        ('forum_integration', '0004_add_review_queue_models'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='bi-award', help_text='Bootstrap icon class', max_length=50)),
                ('image', models.ImageField(blank=True, help_text='Custom badge image', null=True, upload_to='badges/')),
                ('color', models.CharField(default='#ffd700', help_text='Badge color (hex)', max_length=7)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=10)),
                ('condition_type', models.CharField(choices=[('posts_created', 'Posts Created'), ('topics_created', 'Topics Created'), ('likes_received', 'Likes Received'), ('likes_given', 'Likes Given'), ('days_visited', 'Days Visited'), ('reading_time', 'Reading Time'), ('first_post', 'First Post'), ('first_like', 'First Like Given'), ('helpful_posts', 'Helpful Posts'), ('consecutive_days', 'Consecutive Days'), ('trust_level', 'Trust Level Reached'), ('moderation_actions', 'Moderation Actions'), ('flags_resolved', 'Flags Resolved'), ('special_event', 'Special Event'), ('anniversary', 'Anniversary'), ('early_adopter', 'Early Adopter')], max_length=20)),
                ('condition_value', models.IntegerField(help_text='Threshold value for condition')),
                ('condition_data', models.JSONField(blank=True, default=dict, help_text='Additional condition parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until earned')),
                ('points_awarded', models.IntegerField(default=10, help_text='Points given when earned')),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['category', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BadgeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='bi-award', help_text='Bootstrap icon class', max_length=50)),
                ('color', models.CharField(default='#0d6efd', help_text='Hex color code', max_length=7)),
                ('sort_order', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Badge Category',
                'verbose_name_plural': 'Badge Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('milestone', 'Milestone'), ('special', 'Special Event'), ('community', 'Community Achievement'), ('seasonal', 'Seasonal'), ('challenge', 'Challenge')], max_length=20)),
                ('icon', models.CharField(default='bi-trophy', max_length=50)),
                ('color', models.CharField(default='#ffd700', max_length=7)),
                ('requirements', models.JSONField(help_text='Complex achievement requirements')),
                ('points_reward', models.IntegerField(default=50)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badges_granted', models.ManyToManyField(blank=True, to='forum_integration.badge')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['achievement_type', 'name'],
            },
        ),
        migrations.AddField(
            model_name='badge',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='forum_integration.badgecategory'),
        ),
        migrations.CreateModel(
            name='ForumUserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(blank=True, default=dict)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forum_integration.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Forum User Achievement',
                'verbose_name_plural': 'Forum User Achievements',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='PointHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_change', models.IntegerField()),
                ('reason', models.CharField(max_length=200)),
                ('new_total', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forum_integration.badge')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forum_conversation.post')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forum_conversation.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Point History',
                'verbose_name_plural': 'Point History',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('context_data', models.JSONField(blank=True, default=dict)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='forum_integration.badge')),
                ('earned_for_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forum_conversation.post')),
                ('earned_for_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forum_conversation.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('monthly_points', models.IntegerField(default=0)),
                ('weekly_points', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0, help_text='Current daily activity streak')),
                ('longest_streak', models.IntegerField(default=0, help_text='Longest daily activity streak')),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('global_rank', models.IntegerField(blank=True, null=True)),
                ('monthly_rank', models.IntegerField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Points',
                'verbose_name_plural': 'User Points',
                'ordering': ['-total_points'],
            },
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['condition_type', 'is_active'], name='forum_integ_conditi_e08eb0_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['category', 'sort_order'], name='forum_integ_categor_66a032_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['rarity'], name='forum_integ_rarity_717ca3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='forumuserachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='pointhistory',
            index=models.Index(fields=['user', 'timestamp'], name='forum_integ_user_id_1749ba_idx'),
        ),
        migrations.AddIndex(
            model_name='pointhistory',
            index=models.Index(fields=['timestamp'], name='forum_integ_timesta_93c125_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user', 'earned_at'], name='forum_integ_user_id_444ec3_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['badge'], name='forum_integ_badge_i_f00a68_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['notification_sent'], name='forum_integ_notific_826d00_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['total_points'], name='forum_integ_total_p_09204e_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['monthly_points'], name='forum_integ_monthly_a7b762_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['current_streak'], name='forum_integ_current_db43b3_idx'),
        ),
        migrations.AddIndex(
            model_name='userpoints',
            index=models.Index(fields=['last_activity_date'], name='forum_integ_last_ac_ce2f0f_idx'),
        ),
    ]
