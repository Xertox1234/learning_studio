# Generated by Django 5.2.4 on 2025-07-30 02:43

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExercisePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('exercise_type', models.CharField(choices=[('coding', 'Coding Exercise'), ('multiple_choice', 'Multiple Choice'), ('fill_blank', 'Fill in the Blanks'), ('project', 'Project Exercise'), ('quiz', 'Quiz')], default='coding', max_length=50)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('points', models.PositiveIntegerField(default=10, help_text='Points awarded for completing this exercise')),
                ('description', wagtail.fields.RichTextField(help_text='Clear explanation of what the student needs to do')),
                ('starter_code', models.TextField(blank=True, help_text='Initial code provided to students')),
                ('solution_code', models.TextField(blank=True, help_text='Complete solution (hidden from students)')),
                ('programming_language', models.CharField(choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS'), ('sql', 'SQL')], default='python', max_length=50)),
                ('test_cases', wagtail.fields.StreamField([('test_case', 4)], blank=True, block_lookup={0: ('wagtail.blocks.TextBlock', (), {'help_text': 'Input for the test'}), 1: ('wagtail.blocks.TextBlock', (), {'help_text': 'Expected output'}), 2: ('wagtail.blocks.CharBlock', (), {'help_text': 'Description of what this tests'}), 3: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Hide from students (for final validation)'}), 4: ('wagtail.blocks.StructBlock', [[('input', 0), ('expected_output', 1), ('description', 2), ('is_hidden', 3)]], {})})),
                ('hints', wagtail.fields.StreamField([('hint', 2)], blank=True, block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {}), 1: ('wagtail.blocks.IntegerBlock', (), {'default': 3, 'help_text': 'Show hint after this many attempts'}), 2: ('wagtail.blocks.StructBlock', [[('hint_text', 0), ('reveal_after_attempts', 1)]], {})})),
                ('question_data', models.JSONField(blank=True, help_text='Structured data for quizzes, multiple choice, etc.', null=True)),
                ('time_limit', models.PositiveIntegerField(blank=True, help_text='Time limit in minutes (leave blank for no limit)', null=True)),
                ('max_attempts', models.PositiveIntegerField(blank=True, help_text='Maximum attempts allowed (leave blank for unlimited)', null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='LearningIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('featured_courses_title', models.CharField(default='Featured Courses', max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='LearningObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('fundamental', 'Fundamental Concept'), ('practical', 'Practical Skill'), ('advanced', 'Advanced Topic'), ('project', 'Project-Based')], default='fundamental', max_length=50)),
            ],
            options={
                'ordering': ['category', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LessonPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('lesson_number', models.PositiveIntegerField(help_text='Order within the course')),
                ('estimated_duration', models.CharField(blank=True, help_text="e.g., '30 minutes', '1 hour'", max_length=50)),
                ('intro', wagtail.fields.RichTextField(help_text='Brief introduction to the lesson')),
                ('content', wagtail.fields.StreamField([('text', 0), ('heading', 1), ('code_example', 6), ('interactive_exercise', 10), ('video', 12), ('callout', 14), ('quiz', 17)], block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {}), 1: ('wagtail.blocks.CharBlock', (), {'form_classname': 'title'}), 2: ('wagtail.blocks.CharBlock', (), {'required': False}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS'), ('sql', 'SQL'), ('bash', 'Bash')]}), 4: ('wagtail.blocks.TextBlock', (), {}), 5: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 6: ('wagtail.blocks.StructBlock', [[('title', 2), ('language', 3), ('code', 4), ('explanation', 5)]], {}), 7: ('wagtail.blocks.CharBlock', (), {}), 8: ('wagtail.blocks.TextBlock', (), {'required': False}), 9: ('wagtail.blocks.ListBlock', (4,), {'required': False}), 10: ('wagtail.blocks.StructBlock', [[('title', 7), ('instructions', 0), ('starter_code', 8), ('solution', 8), ('hints', 9)]], {}), 11: ('wagtail.blocks.URLBlock', (), {}), 12: ('wagtail.blocks.StructBlock', [[('title', 2), ('video_url', 11), ('description', 5)]], {}), 13: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('info', 'Info'), ('warning', 'Warning'), ('tip', 'Tip'), ('danger', 'Danger')]}), 14: ('wagtail.blocks.StructBlock', [[('type', 13), ('title', 2), ('text', 0)]], {}), 15: ('wagtail.blocks.ListBlock', (7,), {}), 16: ('wagtail.blocks.IntegerBlock', (), {'help_text': 'Index of correct option (0-based)'}), 17: ('wagtail.blocks.StructBlock', [[('question', 7), ('options', 15), ('correct_answer', 16), ('explanation', 5)]], {})})),
                ('lesson_objectives', wagtail.fields.StreamField([('objective', 0)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {})})),
                ('lesson_prerequisites', wagtail.fields.RichTextField(blank=True, help_text='What students should know before this lesson')),
                ('resources', wagtail.fields.StreamField([('resource', 4)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {}), 1: ('wagtail.blocks.URLBlock', (), {}), 2: ('wagtail.blocks.TextBlock', (), {'required': False}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('documentation', 'Documentation'), ('tutorial', 'Tutorial'), ('video', 'Video'), ('article', 'Article'), ('tool', 'Tool/Software')]}), 4: ('wagtail.blocks.StructBlock', [[('title', 0), ('url', 1), ('description', 2), ('type', 3)]], {})})),
            ],
            options={
                'ordering': ['lesson_number'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SkillLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('color', models.CharField(default='#3498db', help_text='Hex color code', max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Skill Levels',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CoursePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('course_code', models.CharField(help_text='Unique identifier for this course (e.g., PY101)', max_length=20, unique=True)),
                ('short_description', models.CharField(help_text='Brief course description for listings', max_length=300)),
                ('detailed_description', wagtail.fields.RichTextField(help_text='Comprehensive course description')),
                ('prerequisites', wagtail.fields.RichTextField(blank=True, help_text='What students should know before taking this course')),
                ('estimated_duration', models.CharField(blank=True, help_text="e.g., '6 weeks', '20 hours'", max_length=50)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('syllabus', wagtail.fields.StreamField([('module', 6)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'max_length': 200}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.blocks.TextBlock', (), {}), 3: ('wagtail.blocks.CharBlock', (), {'max_length': 50, 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('lesson_title', 0), ('lesson_description', 2), ('estimated_time', 3)]], {}), 5: ('wagtail.blocks.ListBlock', (4,), {}), 6: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('lessons', 5)]], {})})),
                ('features', wagtail.fields.StreamField([('feature', 3)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'help_text': 'Icon class', 'max_length': 50}), 1: ('wagtail.blocks.CharBlock', (), {'max_length': 100}), 2: ('wagtail.blocks.TextBlock', (), {}), 3: ('wagtail.blocks.StructBlock', [[('icon', 0), ('title', 1), ('description', 2)]], {})})),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Course price (leave blank for free)', max_digits=10, null=True)),
                ('is_free', models.BooleanField(default=True, help_text='Is this course free?')),
                ('enrollment_limit', models.PositiveIntegerField(blank=True, help_text='Maximum number of students (leave blank for unlimited)', null=True)),
                ('featured', models.BooleanField(default=False, help_text='Show on homepage and featured listings')),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='blog.blogcategory')),
                ('course_image', models.ForeignKey(blank=True, help_text='Main course image for SEO and display', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('instructor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wagtail_courses', to=settings.AUTH_USER_MODEL)),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags')),
                ('learning_objectives', modelcluster.fields.ParentalManyToManyField(blank=True, help_text='What students will learn', to='blog.learningobjective')),
                ('skill_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.skilllevel')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
    ]
