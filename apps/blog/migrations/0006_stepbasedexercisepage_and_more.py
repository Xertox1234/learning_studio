# Generated by Django 5.2.4 on 2025-08-10 21:53

import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0005_alter_lessonpage_content'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='StepBasedExercisePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('require_sequential', models.BooleanField(default=True, help_text='Must complete steps in order')),
                ('total_points', models.PositiveIntegerField(default=100, help_text='Total points for completing all steps')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('estimated_time', models.PositiveIntegerField(default=30, help_text='Estimated time to complete in minutes')),
                ('exercise_steps', wagtail.fields.StreamField([('exercise_step', 9)], block_lookup={0: ('wagtail.blocks.IntegerBlock', (), {'help_text': 'Step order number'}), 1: ('wagtail.blocks.CharBlock', (), {'help_text': 'Step title'}), 2: ('wagtail.blocks.RichTextBlock', (), {'help_text': 'Step instructions and context'}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('code', 'Code Editor'), ('fill_blank', 'Fill in the Blanks'), ('multiple_choice', 'Multiple Choice'), ('quiz', 'Quiz')]}), 4: ('wagtail.blocks.TextBlock', (), {'help_text': 'Code template with {{BLANK_N}} for fill-in-blank', 'required': False}), 5: ('wagtail.blocks.TextBlock', (), {'help_text': 'JSON solutions: {"1": "answer1", "2": "answer2"}', 'required': False}), 6: ('wagtail.blocks.IntegerBlock', (), {'default': 10, 'help_text': 'Points for this step'}), 7: ('wagtail.blocks.TextBlock', (), {'default': "Great job! You've completed this step.", 'help_text': 'Message shown on step completion'}), 8: ('wagtail.blocks.TextBlock', (), {'help_text': 'Optional hint for this step', 'required': False}), 9: ('wagtail.blocks.StructBlock', [[('step_number', 0), ('title', 1), ('description', 2), ('exercise_type', 3), ('template', 4), ('solutions', 5), ('points', 6), ('success_message', 7), ('hint', 8)]], {})})),
                ('general_hints', wagtail.fields.StreamField([('hint', 2)], blank=True, block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {}), 1: ('wagtail.blocks.IntegerBlock', (), {'default': 1, 'help_text': 'Show this hint after completing step N'}), 2: ('wagtail.blocks.StructBlock', [[('hint_text', 0), ('show_after_step', 1)]], {})})),
                ('completion_message', wagtail.fields.RichTextField(default="Congratulations! You've completed all steps.", help_text='Message shown when all steps are completed')),
                ('show_completion_certificate', models.BooleanField(default=False, help_text='Show a completion certificate')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='alternative_solutions',
            field=models.JSONField(blank=True, default=dict, help_text='{"1": ["answer1", "alt1"], "2": ["answer2", "alt2"]} - Alternative correct answers'),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='code_editor_height',
            field=models.CharField(default='400px', help_text='Height of the code editor (e.g., 400px, 60vh)', max_length=20),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='exercise_content',
            field=wagtail.fields.StreamField([('instruction', 0), ('code_example', 5), ('hint_block', 8)], blank=True, block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {'help_text': 'Detailed instructions for the exercise'}), 1: ('wagtail.blocks.CharBlock', (), {'required': False}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS')]}), 3: ('wagtail.blocks.TextBlock', (), {}), 4: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 5: ('wagtail.blocks.StructBlock', [[('title', 1), ('language', 2), ('code', 3), ('explanation', 4)]], {}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('general', 'General Hint'), ('syntax', 'Syntax Hint'), ('logic', 'Logic Hint')]}), 7: ('wagtail.blocks.RichTextBlock', (), {}), 8: ('wagtail.blocks.StructBlock', [[('hint_type', 6), ('content', 7)]], {})}),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='layout_type',
            field=models.CharField(choices=[('standard', 'Standard Layout'), ('fullscreen', 'Fullscreen Editor'), ('split', 'Split View'), ('step_by_step', 'Step by Step')], default='standard', help_text='Choose how the exercise should be displayed', max_length=20),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='progressive_hints',
            field=models.JSONField(blank=True, default=list, help_text='[\n            {"level": 1, "type": "conceptual", "title": "Think About It", \n             "content": "Hint text", "triggerTime": 30, "triggerAttempts": 0}\n        ] - Time and attempt-based hints'),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='show_sidebar',
            field=models.BooleanField(default=True, help_text='Show instructions sidebar'),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='solutions',
            field=models.JSONField(blank=True, default=dict, help_text='{"1": "answer1", "2": "answer2"} - Solutions for each blank'),
        ),
        migrations.AddField(
            model_name='exercisepage',
            name='template_code',
            field=models.TextField(blank=True, help_text='Code template with {{BLANK_N}} placeholders for fill-in-blank exercises'),
        ),
    ]
