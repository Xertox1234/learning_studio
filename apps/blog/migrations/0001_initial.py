# Generated by Django 5.2.4 on 2025-07-06 15:57

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0094_alter_page_locale'),
        ('wagtailimages', '0027_image_description'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#3498db', help_text='Hex color code', max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(verbose_name='Post date')),
                ('intro', models.CharField(help_text='Brief introduction to the post', max_length=250)),
                ('body', wagtail.fields.StreamField([('heading', 0), ('paragraph', 1), ('image', 2), ('code', 6), ('quote', 8), ('embed', 9), ('callout', 11)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'form_classname': 'title'}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS'), ('sql', 'SQL'), ('bash', 'Bash')]}), 4: ('wagtail.blocks.TextBlock', (), {}), 5: ('wagtail.blocks.CharBlock', (), {'required': False}), 6: ('wagtail.blocks.StructBlock', [[('language', 3), ('code', 4), ('caption', 5)]], {}), 7: ('wagtail.blocks.CharBlock', (), {'blank': True, 'label': 'Source', 'required': False}), 8: ('wagtail.blocks.StructBlock', [[('text', 4), ('attribute_name', 7)]], {}), 9: ('wagtail.blocks.RawHTMLBlock', (), {'help_text': 'Embed code (YouTube, CodePen, etc.)'}), 10: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('info', 'Info'), ('warning', 'Warning'), ('tip', 'Tip'), ('danger', 'Danger')]}), 11: ('wagtail.blocks.StructBlock', [[('type', 10), ('title', 5), ('text', 1)]], {})})),
                ('reading_time', models.PositiveIntegerField(default=5, help_text='Estimated reading time in minutes')),
                ('ai_summary', models.TextField(blank=True, help_text='AI-generated summary of the post (auto-populated)')),
                ('ai_generated', models.BooleanField(default=False, help_text='Indicates if content was AI-assisted')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='blog.blogcategory')),
                ('featured_image', models.ForeignKey(blank=True, help_text='Image for social media and featured post display', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('hero_title', models.CharField(default='Python Learning Studio', max_length=255)),
                ('hero_subtitle', models.CharField(blank=True, max_length=255)),
                ('hero_description', wagtail.fields.RichTextField(blank=True)),
                ('features_title', models.CharField(default='Why Learn With Us?', max_length=255)),
                ('features', wagtail.fields.StreamField([('feature', 3)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'max_length': 100}), 1: ('wagtail.blocks.TextBlock', (), {}), 2: ('wagtail.blocks.CharBlock', (), {'help_text': 'Font Awesome icon class', 'max_length': 50}), 3: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('icon', 2)]], {})})),
                ('stats', wagtail.fields.StreamField([('stat', 3)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'max_length': 20}), 1: ('wagtail.blocks.CharBlock', (), {'max_length': 50}), 2: ('wagtail.blocks.TextBlock', (), {'required': False}), 3: ('wagtail.blocks.StructBlock', [[('number', 0), ('label', 1), ('description', 2)]], {})})),
                ('hero_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TutorialPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('programming_language', models.CharField(choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML/CSS'), ('sql', 'SQL'), ('other', 'Other')], default='python', max_length=50)),
                ('estimated_time', models.CharField(help_text="e.g., '30 minutes', '2 hours'", max_length=50)),
                ('prerequisites', wagtail.fields.RichTextField(blank=True, help_text='What students should know before starting')),
                ('learning_objectives', wagtail.fields.StreamField([('objective', 0)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {})})),
                ('intro', wagtail.fields.RichTextField()),
                ('content', wagtail.fields.StreamField([('step', 6), ('section_break', 8)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.blocks.TextBlock', (), {'required': False}), 3: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('python', 'Python'), ('javascript', 'JavaScript'), ('html', 'HTML'), ('css', 'CSS'), ('sql', 'SQL'), ('bash', 'Bash')], 'required': False}), 4: ('wagtail.images.blocks.ImageChooserBlock', (), {'required': False}), 5: ('wagtail.blocks.RichTextBlock', (), {'label': 'Pro Tip', 'required': False}), 6: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 1), ('code', 2), ('code_language', 3), ('image', 4), ('tip', 5)]], {}), 7: ('wagtail.blocks.RichTextBlock', (), {'required': False}), 8: ('wagtail.blocks.StructBlock', [[('title', 0), ('description', 7)]], {})})),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tutorials', to=settings.AUTH_USER_MODEL)),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='blog.blogcategory')),
                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
    ]
