version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - python_learning_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - python_learning_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    ports:
      - "80:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    networks:
      - python_learning_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - python_learning_network
    security_opt:
      - no-new-privileges:true

  # Celery Worker for Background Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    command: celery -A learning_community worker -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    networks:
      - python_learning_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Code Execution Service (Isolated)
  code-executor:
    build:
      context: ./docker/python-executor
      dockerfile: Dockerfile
    restart: "no"  # Only start when needed
    network_mode: none  # No network access
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # May need custom seccomp profile
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/code:noexec,nosuid,size=50m
      - /app/output:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    mem_limit: 256m
    cpus: 0.5
    pids_limit: 50
    ulimits:
      nproc: 50
      nofile: 1024
    environment:
      - TIME_LIMIT=30
      - MEMORY_LIMIT=134217728  # 128MB
    profiles:
      - code-execution

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  python_learning_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16